# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Install Script for CAM on IBM ROKS Cloud
#
# V1.0 
#
# Â©2020 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

source ./0_variables.sh

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "  "
echo " ${CYAN} Install Terraform & Service Automation Module (CAM) for OpenShift 4.3${NC}"
echo "  "
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "  "
echo "  "
echo "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET PARAMETERS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Input Parameters${NC}"


        while getopts "t:d:h:p:s:x:" opt
        do
          case "$opt" in
              t ) INPUT_TOKEN="$OPTARG" ;;
              d ) INPUT_PATH="$OPTARG" ;;
              h ) INPUT_CLUSTER_NAME="$OPTARG" ;;
              p ) INPUT_PWD="$OPTARG" ;;
              s ) INPUT_SC="$OPTARG" ;;
              x ) INPUT_CONSOLE_PREFIX="$OPTARG";;
          esac
        done



        if [[ $INPUT_TOKEN == "" ]];
        then
        echo "    ${RED}ERROR${NC}: Please provide the Registry Token"
        echo "    USAGE: $0 -t <REGISTRY_TOKEN> -x <OCP_CONSOLE_PREFIX> [-h <CLUSTER_NAME>] [-p <MCM_PASSWORD>] [-d <TEMP_DIRECTORY>] [-s <STORAGE_CLASS>]"
        exit 1
        else
          echo "    ${GREEN}Token OK:${NC}                           '$INPUT_TOKEN'"
          ENTITLED_REGISTRY_KEY=$INPUT_TOKEN
        fi


        if [[ $INPUT_CONSOLE_PREFIX == "" ]];
        then
            echo "    ${RED}ERROR${NC}: Please provide the OCP console prefix (for example console"
            echo "    USAGE: $0 -t <REGISTRY_TOKEN> -x <OCP_CONSOLE_PREFIX> [-h <CLUSTER_NAME>] [-p <MCM_PASSWORD>] [-d <TEMP_DIRECTORY>] [-s <STORAGE_CLASS>]"
            exit 1
        else
          echo "    ${GREEN}Console Prefix OK:${NC}                  '$INPUT_CONSOLE_PREFIX'"
          OCP_CONSOLE_PREFIX=$INPUT_CONSOLE_PREFIX
        fi



        if [[ ($INPUT_CLUSTER_NAME == "") ]];
        then
          echo "    ${ORANGE}No Cluster Name provided${NC}            ${GREEN}will be determined from Kubeconfig${NC}"
        else
          echo "    ${GREEN}Cluster OK:${NC}                           '$INPUT_CLUSTER_NAME'"
          CLUSTER_NAME=$INPUT_CLUSTER_NAME
        fi



        if [[ $INPUT_PWD == "" ]];          
        then
          echo "    ${ORANGE}No Password provided, using${NC}         '$MCM_PWD'"
        else
          echo "    ${GREEN}Password OK:${NC}                        '********'"
          MCM_PWD=$INPUT_PWD
        fi



        if [[ $INPUT_PATH == "" ]];
        then
          echo "    ${ORANGE}No Path provided, using${NC}             '$TEMP_PATH'"
        else
          echo "    ${GREEN}Path OK:${NC}                            '$INPUT_PATH'"
          TEMP_PATH=$INPUT_PATH
        fi



        if [[ $INPUT_SC == "" ]];
        then
          echo "    ${ORANGE}No Storage Class provided, using${NC}    '$STORAGE_CLASS_BLOCK' and '$STORAGE_CLASS_FILE'"
        else
          echo "    ${GREEN}Storage Class OK:${NC}                   '$INPUT_SC'"
          STORAGE_CLASS_BLOCK=$INPUT_SC

          if [[ $(uname) =~ "Darwin" ]];
          then
            STORAGE_CLASS_FILE=$(echo $STORAGE_CLASS_BLOCK | sed -e "s/block/file/")
          else
            STORAGE_CLASS_FILE=$(echo $STORAGE_CLASS_BLOCK | sed "s/block/file/")
          fi

        fi

        if [[ ($INPUT_CLUSTER_NAME == "") ]];
        then
          getClusterFQN
          #CLUSTER_FQDN=$? 
        fi
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# PRE-INSTALL CHECKS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Pre-Install Checks${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"

        POLICY_SCC=$(oc adm policy add-scc-to-user ibm-anyuid-hostpath-scc system:serviceaccount:services:default 2>&1)

        checkHelmExecutable

        checkCloudctlExecutable

        checkOpenshiftReachable

        checkKubeconfigIsSet

        checkStorageClassExists

        checkDefaultStorageDefined

        checkRegistryCredentials

        #checkClusterServiceBroker

echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "





# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Define some Stuff
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Define some Stuff${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"

        getInstallPath

echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "





# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# CONFIG SUMMARY
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo " ${GREEN}CAM will be installed in Cluster ${ORANGE}'$CLUSTER_NAME'${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Your configuration${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "    ${GREEN}CLUSTER :${NC}             $CLUSTER_NAME"
echo "    ${GREEN}REGISTRY TOKEN:${NC}       $ENTITLED_REGISTRY_KEY"
echo "    ----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "    ${GREEN}MCM Server:${NC}           $MCM_SERVER"
echo "    ${GREEN}MCM User Name:${NC}        $MCM_USER"
echo "    ${GREEN}MCM User Password:${NC}    ************"
echo "    ----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "    ${GREEN}STORAGE CLASS BLOCK:${NC}  $STORAGE_CLASS_BLOCK"
echo "    ${GREEN}STORAGE CLASS FILE:${NC}   $STORAGE_CLASS_FILE"
echo "    ----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "    ${GREEN}INSTALL PATH:${NC}         $INSTALL_PATH"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "




echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${RED}Continue Installation with these Parameters? [y,N]${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
        read -p "[y,N]" DO_COMM
        if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
          echo "${GREEN}Continue...${NC}"
        else
          echo "${RED}Installation Aborted${NC}"
          exit 2
        fi
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# PREREQUISITES
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Running Prerequisites${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"

        echo "---------------------------------------------------------------------------------------------------------------------------"
        echo " Create ${CYAN}Config Directory{NC}"
        rm -r $INSTALL_PATH/* 
        mkdir -p $INSTALL_PATH 
        cd $INSTALL_PATH
        echo "    ${GREEN}  OK${NC}"
        echo "  "

        echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
        echo " Create ${CYAN}Secret{NC}"
        kubectl delete secret -n services camsecret
        kubectl create secret docker-registry camsecret --docker-username="$ENTITLED_REGISTRY_USER" --docker-password="$ENTITLED_REGISTRY_KEY" --docker-email="test@us.ibm.com" --docker-server="cp.icr.io" -n services
        echo "    ${GREEN}  OK${NC}"
        echo "  "
        
        echo "  "
        echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
        echo " Create ${CYAN}Service Account{NC}"
        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "camsecret"}]}' -n services
        echo "    ${GREEN}  OK${NC}"
        echo "  "
        
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# SERVICE ID
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Create Service ID${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"

        TOKEN_EXISTS=$(ls 2>&1)

        if [[ $TOKEN_EXISTS =~ "token.txt" ]];
        then
          echo "  ${ORANGE}WARNING${NC}: TOKEN already exists"
          read -p "  Delete and recreate? [y,N]" DO_COMM
          if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
            rm token.txt
            createToken
          fi
        else 
          echo "    ${GREEN}OK - Creating TOKEN${NC}"
          createToken
        fi

        export SERVICE_TOKEN=$(cat token.txt | tail -1 | awk '{ print $3 }')


echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " Using Service ID TOKEN:"
echo "    "${RED}$SERVICE_TOKEN${NC}
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "





# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# HELM CHART
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Helm Chart${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"

        CHART_EXISTS=$(ls 2>&1)

        if [[ $CHART_EXISTS =~ $CAM_VERSION ]];
        then
          echo "    ${GREEN}OK - Chart already Downloaded${NC}"
        else 
          echo "    ${GREEN}Downloading Chart${NC}"
          LOGIN_OK=$(cloudctl login -a ${MCM_SERVER} --skip-ssl-validation -u ${MCM_USER} -p ${MCM_PWD} -n kube-system)
          if [[ $LOGIN_OK =~ "Error response from server" ]];
          then
                echo "    ${RED}ERROR${NC}: Could not login to MCM Hub on Cluster '$CLUSTER_NAME'. Aborting."
                exit 2
          else
            $HELM_BIN repo add ibm-stable https://raw.githubusercontent.com/IBM/charts/master/repo/stable/
            $HELM_BIN repo update
            $HELM_BIN fetch ibm-stable/ibm-cam --version $CAM_VERSION
          fi
        fi

echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "







# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# INSTALL
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " ${ORANGE}Do you want to install CAM into Cluster '$CLUSTER_NAME'?${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"

        read -p "Install? [y,N]" DO_COMM
        if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then


          read -p "Install with Persistence for all (otherwise only for MongoDB)? [y,N]" DO_COMM
          if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
          $HELM_BIN install --name cam ibm-cam-$CAM_VERSION.tgz \
            --namespace services  \
            --set global.image.secretName=camsecret  \
            --set arch=amd64  \
            --set global.iam.deployApiKey=$SERVICE_TOKEN  \
            --set icp.port=443  \
            --set global.audit=false \
            --set camMongoPV.persistence.storageClassName=$STORAGE_CLASS_BLOCK \
            --set camMongoPV.persistence.enabled=true \
            --set camMongoPV.persistence.accessMode=ReadWriteOnce \
            --set camMongoPV.persistence.useDynamicProvisioning=true \
            --set camLogsPV.persistence.useDynamicProvisioning=true \
            --set camLogsPV.persistence.storageClassName=$STORAGE_CLASS_FILE \
            --set camLogsPV.persistence.accessMode=ReadWriteMany \
            --set camTerraformPV.persistence.useDynamicProvisioning=true \
            --set camTerraformPV.persistence.storageClassName=$STORAGE_CLASS_FILE \
            --set camTerraformPV.persistence.accessMode=ReadWriteMany \
            --set camBPDAppDataPV.persistence.useDynamicProvisioning=true \
            --set camBPDAppDataPV.persistence.storageClassName=$STORAGE_CLASS_FILE \
            --set camBPDAppDataPV.persistence.accessMode=ReadWriteMany \
            --tls
          else
            $HELM_BIN install --name cam ibm-cam-$CAM_VERSION.tgz \
            --namespace services  \
            --set global.image.secretName=camsecret  \
            --set arch=amd64  \
            --set global.iam.deployApiKey=$SERVICE_TOKEN  \
            --set icp.port=443  \
            --set global.audit=false \
            --set camMongoPV.persistence.storageClassName=$STORAGE_CLASS_BLOCK \
            --set camMongoPV.persistence.enabled=true \
            --set camMongoPV.persistence.accessMode=ReadWriteOnce \
            --set camMongoPV.persistence.useDynamicProvisioning=true \
            --set camLogsPV.persistence.enabled=false \
            --set camBPDAppDataPV.persistence.enabled=false \
            --set camTerraformPV.persistence.enabled=false \
            --tls
          fi



          echo ""
          echo ""
          echo ""
          echo ""
          echo ""
          echo ""
          echo "${ORANGE}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
          echo "${ORANGE}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
          echo " ${RED}Post Install:${NC} Register CAM into MCM UI in '$CLUSTER_NAME'?"
          echo "${ORANGE}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
          echo "${ORANGE}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
          echo " Please run"
          echo "  ${ORANGE}./tools/automation-navigation-updates.sh -a services${NC}"
          echo ""
          echo ""
        fi



echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo " ${GREEN}CAM Installation.... DONE${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo " ${GREEN}To remove release: $HELM_BIN delete cam --purge --tls${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"




